agent$sync_and_save_candles(agent$rename_ohlcv_from_okx(agent$get_candles_okx("ETH-USDT-SWAP", "4H")), 'ETH-USDT-SWAP')
.safe_read_rds("/tmp/ETHUSDT_4H.rds")
library("XAgent")
source('~/Documents/2025/_2025-05-11_XAgent/XAgent/R/utils_io_safe.R')
source('~/Documents/2025/_2025-05-11_XAgent/XAgent/R/utils_OKX_helpers.R')
CryptoTraderAgent <- R6::R6Class("CryptoTraderAgent",
inherit = XAgent,
public = list(
run = function() {
self$local_check_and_reply()
},
# set data path
set_data_path = function(inst_id, path) {
self$mind_state$data_path[[inst_id]] <- path
},
get_data_path = function(inst_id) {
self$mind_state$data_path[[inst_id]]
},
# market data
get_candles_okx = function(inst_id, bar, limit = 100L) {
okxr::get_market_candles(
inst_id, bar, limit,
tz = self$mind_state$timezone, config = self$mind_state$tool_config$okx
)
},
get_history_candles_okx = function(inst_id, bar, before, limit = 100L) {
okxr::get_market_history_candles(
inst_id, bar, before, limit,
tz = self$mind_state$timezone, config = self$mind_state$tool_config$okx
)
},
get_mark_price = function(inst_id) {
okxr::get_public_mark_price(inst_id, tz = self$mind_state$timezone, config = self$mind_state$tool_config$okx)
},
# place order, check order, and cancel order
place_order = function(body_list) {
res <- okxr::post_trade_order(body_list, tz = self$mind_state$timezone, config = self$mind_state$tool_config$okx)
self$mind_state$order_live_list <- c(res$ordId, self$mind_state$order_live_list)
},
check_order = function(inst_id, ord_id) {
okxr::get_trade_order(inst_id, ord_id, tz = self$mind_state$timezone, config = self$mind_state$tool_config$okx)
},
cancel_order = function(body_list) {
okxr::post_trade_cancel_order(body_list, tz = self$mind_state$timezone, config = self$mind_state$tool_config$okx)
},
# for data
rename_ohlcv_from_okx = rename_ohlcv_from_okx,
detect_time_gaps = detect_time_gaps,
load_candle_data = function(inst_id) .safe_read_rds(self$get_data_path(inst_id)),
sync_and_save_candles = function(df_new, inst_id) sync_and_save_candles(df_new, self$get_data_path(inst_id))
)
)
name <- "Zelina"
mind_state <- list(
identity = "a no-nonsense crypto trader and former investment banker from Hong Kong.",
personality = "clear, smart, and slightly provocative.",
tone_guideline = "Use technical vocabulary when needed, but be practical. Prioritize clarity over fluff."
)
agent <- CryptoTraderAgent$new(name, mind_state)
agent$mind_state$timezone <- "Asia/Hong_Kong"
agent$set_config('okx')
agent$set_data_path("ETH-USDT-SWAP", '/tmp/ETHUSDT_4H.rds')
agent$sync_and_save_candles(agent$rename_ohlcv_from_okx(agent$get_candles_okx("ETH-USDT-SWAP", "4H")), 'ETH-USDT-SWAP')
new_df <- agent$rename_ohlcv_from_okx(agent$get_candles_okx("ETH-USDT-SWAP", "4H"))
str(new_df)
str(agent$load_candle_data('ETH-USDT-SWAP'))
library("XAgent")
source('~/Documents/2025/_2025-05-11_XAgent/XAgent/R/utils_io_safe.R')
source('~/Documents/2025/_2025-05-11_XAgent/XAgent/R/utils_OKX_helpers.R')
CryptoTraderAgent <- R6::R6Class("CryptoTraderAgent",
inherit = XAgent,
public = list(
run = function() {
self$local_check_and_reply()
},
# set data path
set_data_path = function(inst_id, path) {
self$mind_state$data_path[[inst_id]] <- path
},
get_data_path = function(inst_id) {
self$mind_state$data_path[[inst_id]]
},
# market data
get_candles_okx = function(inst_id, bar, limit = 100L) {
okxr::get_market_candles(
inst_id, bar, limit,
tz = self$mind_state$timezone, config = self$mind_state$tool_config$okx
)
},
get_history_candles_okx = function(inst_id, bar, before, limit = 100L) {
okxr::get_market_history_candles(
inst_id, bar, before, limit,
tz = self$mind_state$timezone, config = self$mind_state$tool_config$okx
)
},
get_mark_price = function(inst_id) {
okxr::get_public_mark_price(inst_id, tz = self$mind_state$timezone, config = self$mind_state$tool_config$okx)
},
# place order, check order, and cancel order
place_order = function(body_list) {
res <- okxr::post_trade_order(body_list, tz = self$mind_state$timezone, config = self$mind_state$tool_config$okx)
self$mind_state$order_live_list <- c(res$ordId, self$mind_state$order_live_list)
},
check_order = function(inst_id, ord_id) {
okxr::get_trade_order(inst_id, ord_id, tz = self$mind_state$timezone, config = self$mind_state$tool_config$okx)
},
cancel_order = function(body_list) {
okxr::post_trade_cancel_order(body_list, tz = self$mind_state$timezone, config = self$mind_state$tool_config$okx)
},
# for data
rename_ohlcv_from_okx = rename_ohlcv_from_okx,
detect_time_gaps = detect_time_gaps,
load_candle_data = function(inst_id) .safe_read_rds(self$get_data_path(inst_id)),
sync_and_save_candles = function(df_new, inst_id) sync_and_save_candles(df_new, self$get_data_path(inst_id))
)
)
name <- "Zelina"
mind_state <- list(
identity = "a no-nonsense crypto trader and former investment banker from Hong Kong.",
personality = "clear, smart, and slightly provocative.",
tone_guideline = "Use technical vocabulary when needed, but be practical. Prioritize clarity over fluff."
)
agent <- CryptoTraderAgent$new(name, mind_state)
agent$mind_state$timezone <- "Asia/Hong_Kong"
agent$set_config('okx')
agent$set_data_path("ETH-USDT-SWAP", '/tmp/ETHUSDT_4H.rds')
agent$sync_and_save_candles(agent$rename_ohlcv_from_okx(agent$get_candles_okx("ETH-USDT-SWAP", "4H")), 'ETH-USDT-SWAP')
agent$load_candle_data('ETH-USDT-SWAP)
'
)
agent$load_candle_data('ETH-USDT-SWAP')
agent$detect_time_gaps(agent$load_candle_data('ETH-USDT-SWAP'))
View(agent$detect_time_gaps(agent$load_candle_data('ETH-USDT-SWAP')))
View(agent$load_candle_data('ETH-USDT-SWAP'))
source('~/Documents/2025/_2025-05-11_XAgent/XAgent/R/utils_calculate_TT.R')
tail(agent$load_candle_data('ETH-USDT-SWAP'), 30)
calculate_TT(tail(agent$load_candle_data('ETH-USDT-SWAP'), 30))
calculate_TT(tail(agent$load_candle_data('ETH-USDT-SWAP'), 50))
source('~/Documents/2025/_2025-05-11_XAgent/XAgent/R/utils_calculate_TT.R')
calculate_TT(tail(agent$load_candle_data('ETH-USDT-SWAP'), 50))
calculate_TT(tail(agent$load_candle_data('ETH-USDT-SWAP'), 100))
library("XAgent")
source('~/Documents/2025/_2025-05-11_XAgent/XAgent/R/utils_io_safe.R')
source('~/Documents/2025/_2025-05-11_XAgent/XAgent/R/utils_OKX_helpers.R')
source('~/Documents/2025/_2025-05-11_XAgent/XAgent/R/utils_calculate_TT.R')
calculate_TT(tail(agent$load_candle_data('ETH-USDT-SWAP'), 60))
agent$get_mark_price('ETH-USDT-SWAP')
public_row
public_row <- calculate_TT(tail(agent$load_candle_data('ETH-USDT-SWAP'), 60))
public_row
agent$get_mark_price('ETH-USDT-SWAP')
agent$get_mark_price('ETH-USDT-SWAP')$markPx
public_row <- calculate_TT(tail(agent$load_candle_data('ETH-USDT-SWAP'), 60))
public_row$latest_price <- agent$get_mark_price('ETH-USDT-SWAP')$markPx
public_row
source('~/Documents/2025/_2025-05-11_XAgent/XAgent/R/utils_io_safe.R')
source('~/Documents/2025/_2025-05-11_XAgent/XAgent/R/utils_OKX_helpers.R')
source('~/Documents/2025/_2025-05-11_XAgent/XAgent/R/utils_calculate_TT.R')
breakout_v1(public_row)
source('~/Documents/2025/_2025-05-11_XAgent/XAgent/R/utils_strategy.R')
breakout_v1(public_row)
public_row
breakout_v1
source('~/Documents/2025/_2025-05-11_XAgent/XAgent/R/utils_strategy.R')
breakout_v1(public_row)
public_row
public_row <- calculate_TT(tail(agent$load_candle_data('ETH-USDT-SWAP'), 60))
public_row$latest_close <- agent$get_mark_price('ETH-USDT-SWAP')$markPx
breakout_v1(public_row)
fast_ma <- public_row$ema_20
slow_ma <- public_row$ema_50
latest_close  <- public_row$latest_close
high_prev <- public_row$high_max_25
low_prev  <- public_row$low_min_25
atr_rising <- public_row$atr_rising
fast_ma > slow_ma
latest_close > high_prev
fast_ma < slow_ma
latest_close < low_prev
XAgent::tool_set_config('email)
')
config <- 'XAgent::tool_set_config('email')
config <- XAgent::tool_set_config('email')
config
check_email <- function(config, n = 5) {
# Make sure curl supports IMAP
stopifnot(requireNamespace("curl", quietly = TRUE))
# IMAP URL for Gmail's inbox
imap_url <- sprintf("imaps://imap.gmail.com/INBOX;UID=1:*")
# Use curl handle for auth
handle <- curl::new_handle()
curl::handle_setopt(
handle,
username = config$from,
password = config$password,
customrequest = "FETCH 1:* (BODY[HEADER.FIELDS (SUBJECT FROM DATE)])"
)
# Perform request
con <- curl::curl(imap_url, handle = handle)
on.exit(close(con))
lines <- readLines(con)
# Extract subjects and return last n messages
headers <- grep("^Subject:|^From:|^Date:", lines, value = TRUE)
emails <- split(headers, cumsum(grepl("^Subject:", headers)))
last_n <- tail(emails, n)
sapply(last_n, paste, collapse = "\n")
}
check_email(config = config)
library(curl)
con <- curl("imaps://imap.gmail.com", handle = curl::new_handle(
username = config$from,
password = config$password
))
readLines(con, n = 1)
library("XAgent")
source('~/Documents/2025/_2025-05-11_XAgent/XAgent/R/utils_io_safe.R')
source('~/Documents/2025/_2025-05-11_XAgent/XAgent/R/utils_OKX_helpers.R')
source('~/Documents/2025/_2025-05-11_XAgent/XAgent/R/utils_calculate_TT.R')
source('~/Documents/2025/_2025-05-11_XAgent/XAgent/R/utils_strategy.R')
CryptoTraderAgent <- R6::R6Class("CryptoTraderAgent",
inherit = XAgent,
public = list(
run = function() {
self$local_check_and_reply()
},
# set data path
set_data_path = function(inst_id, path) {
self$mind_state$data_path[[inst_id]] <- path
},
get_data_path = function(inst_id) {
self$mind_state$data_path[[inst_id]]
},
# market data
get_candles_okx = function(inst_id, bar, limit = 100L) {
okxr::get_market_candles(
inst_id, bar, limit,
tz = self$mind_state$timezone, config = self$mind_state$tool_config$okx
)
},
get_history_candles_okx = function(inst_id, bar, before, limit = 100L) {
okxr::get_market_history_candles(
inst_id, bar, before, limit,
tz = self$mind_state$timezone, config = self$mind_state$tool_config$okx
)
},
get_mark_price = function(inst_id) {
okxr::get_public_mark_price(inst_id, tz = self$mind_state$timezone, config = self$mind_state$tool_config$okx)
},
# place order, check order, and cancel order
place_order = function(body_list) {
res <- okxr::post_trade_order(body_list, tz = self$mind_state$timezone, config = self$mind_state$tool_config$okx)
self$mind_state$order_live_list <- c(res$ordId, self$mind_state$order_live_list)
},
check_order = function(inst_id, ord_id) {
okxr::get_trade_order(inst_id, ord_id, tz = self$mind_state$timezone, config = self$mind_state$tool_config$okx)
},
cancel_order = function(body_list) {
okxr::post_trade_cancel_order(body_list, tz = self$mind_state$timezone, config = self$mind_state$tool_config$okx)
},
# for data
rename_ohlcv_from_okx = rename_ohlcv_from_okx,
detect_time_gaps = detect_time_gaps,
load_candle_data = function(inst_id) .safe_read_rds(self$get_data_path(inst_id)),
sync_and_save_candles = function(df_new, inst_id) sync_and_save_candles(df_new, self$get_data_path(inst_id))
)
)
name <- "Zelina"
mind_state <- list(
identity = "a no-nonsense crypto trader and former investment banker from Hong Kong.",
personality = "clear, smart, and slightly provocative.",
tone_guideline = "Use technical vocabulary when needed, but be practical. Prioritize clarity over fluff."
)
agent <- CryptoTraderAgent$new(name, mind_state)
agent$mind_state$timezone <- "Asia/Hong_Kong"
agent$set_config('okx')
agent$set_data_path("ETH-USDT-SWAP", '/tmp/ETHUSDT_4H.rds')
agent$mind_state$order_live_list
order <- list(
instId = "ETH-USDT-SWAP",
tdMode = "cross",
clOrdId = paste0("r", format(Sys.time(), "%Y%m%d%H%M%S"), sample(1000:9999, 1)),
side = "buy",
posSide = "long",
ordType = "limit",
sz = "0.01",
px = "1700"
)
agent$place_order(order)
agent$mind_state$order_live_list
order <- list(
instId = "ETH-USDT-SWAP",
tdMode = "cross",
clOrdId = paste0("r", format(Sys.time(), "%Y%m%d%H%M%S"), sample(1000:9999, 1)),
side = "buy",
posSide = "long",
ordType = "limit",
sz = "0.01",
px = "1700"
)
agent$place_order(order)
agent$mind_state$order_live_list
all_live_orders <- do.call(rbind, lapply(agent$mind_state$order_live_list, function(order_id) {
df <- agent$check_order('ETH-USDT-SWAP', order_id)
df$order_id <- order_id
df
}))
all_live_orders
all_live_orders <- do.call(rbind, lapply(agent$mind_state$order_live_list, function(order_id) {
agent$check_order('ETH-USDT-SWAP', order_id)
}))
all_live_orders
cancel_all_order_status <- do.call(rbind, lapply(agent$mind_state$order_live_list, function(order_id) {
agent$cancel_order('ETH-USDT-SWAP', order_id)
}))
okxr::post_trade_cancel_order
order_live_list <- agent$mind_state$order_live_list
order_live_list
library("XAgent")
source('~/Documents/2025/_2025-05-11_XAgent/XAgent/R/utils_io_safe.R')
source('~/Documents/2025/_2025-05-11_XAgent/XAgent/R/utils_OKX_helpers.R')
source('~/Documents/2025/_2025-05-11_XAgent/XAgent/R/utils_calculate_TT.R')
source('~/Documents/2025/_2025-05-11_XAgent/XAgent/R/utils_strategy.R')
CryptoTraderAgent <- R6::R6Class("CryptoTraderAgent",
inherit = XAgent,
public = list(
run = function() {
self$local_check_and_reply()
},
# set data path
set_data_path = function(inst_id, path) {
self$mind_state$data_path[[inst_id]] <- path
},
get_data_path = function(inst_id) {
self$mind_state$data_path[[inst_id]]
},
# market data
get_candles_okx = function(inst_id, bar, limit = 100L) {
okxr::get_market_candles(
inst_id, bar, limit,
tz = self$mind_state$timezone, config = self$mind_state$tool_config$okx
)
},
get_history_candles_okx = function(inst_id, bar, before, limit = 100L) {
okxr::get_market_history_candles(
inst_id, bar, before, limit,
tz = self$mind_state$timezone, config = self$mind_state$tool_config$okx
)
},
get_mark_price = function(inst_id) {
okxr::get_public_mark_price(inst_id, tz = self$mind_state$timezone, config = self$mind_state$tool_config$okx)
},
# place order, check order, and cancel order
place_order = function(body_list) {
res <- okxr::post_trade_order(body_list, tz = self$mind_state$timezone, config = self$mind_state$tool_config$okx)
self$mind_state$order_live_list <- c(res$ordId, self$mind_state$order_live_list)
},
check_order = function(inst_id, ord_id) {
okxr::get_trade_order(inst_id, ord_id, tz = self$mind_state$timezone, config = self$mind_state$tool_config$okx)
},
cancel_order = function(inst_id, ord_id) {
okxr::post_trade_cancel_order(list(instId = inst_id, ordId = ord_id), tz = self$mind_state$timezone, config = self$mind_state$tool_config$okx)
},
# for data
rename_ohlcv_from_okx = rename_ohlcv_from_okx,
detect_time_gaps = detect_time_gaps,
load_candle_data = function(inst_id) .safe_read_rds(self$get_data_path(inst_id)),
sync_and_save_candles = function(df_new, inst_id) sync_and_save_candles(df_new, self$get_data_path(inst_id))
)
)
name <- "Zelina"
mind_state <- list(
identity = "a no-nonsense crypto trader and former investment banker from Hong Kong.",
personality = "clear, smart, and slightly provocative.",
tone_guideline = "Use technical vocabulary when needed, but be practical. Prioritize clarity over fluff."
)
agent <- CryptoTraderAgent$new(name, mind_state)
agent$mind_state$timezone <- "Asia/Hong_Kong"
agent$set_config('okx')
agent$set_data_path("ETH-USDT-SWAP", '/tmp/ETHUSDT_4H.rds')
agent$mind_state$order_live_list <- order_live_list
all_live_orders <- do.call(rbind, lapply(agent$mind_state$order_live_list, function(order_id) {
agent$check_order('ETH-USDT-SWAP', order_id)
}))
all_live_orders
cancel_all_order_status <- do.call(rbind, lapply(agent$mind_state$order_live_list, function(order_id) {
agent$cancel_order('ETH-USDT-SWAP', order_id)
}))
cancel_all_order_status
agent$sync_and_save_candles(agent$rename_ohlcv_from_okx(agent$get_candles_okx("ETH-USDT-SWAP", "4H")), 'ETH-USDT-SWAP')
View(agent$load_candle_data('ETH-USDT-SWAP'))
agent$sync_and_save_candles
sync_and_save_candles
agent$sync_and_save_candles(agent$rename_ohlcv_from_okx(agent$get_candles_okx("ETH-USDT-SWAP", "4H")), 'ETH-USDT-SWAP')
sync_and_save_candles <- function(df_new, data_path) {
df_new <- df_new[df_new$confirm==1L,]
key_column <- "timestamp"
if (!file.exists(data_path)) {
df_new <- df_new[order(as.numeric(df_new$timestamp)), ]
.safe_save_rds(df_new, data_path)
return(TRUE)
} else {
df_old <- .safe_read_rds(data_path)
old_keys <- as.character(unique(df_old[[key_column]]))
res <- util_sync_new_records(df_new, key_column, old_keys)
if (res$has_new) {
df_combined <- rbind(df_old, res$df)
df_combined <- df_combined[order(as.numeric(df_combined[[key_column]])), ]
.safe_save_rds(df_combined, data_path)
}
return(res$has_new)
}
}
agent$sync_and_save_candles(agent$rename_ohlcv_from_okx(agent$get_candles_okx("ETH-USDT-SWAP", "4H")), 'ETH-USDT-SWAP')
public_row <- calculate_TT(tail(agent$load_candle_data('ETH-USDT-SWAP'), 60))
public_row$latest_close <- agent$get_mark_price('ETH-USDT-SWAP')$markPx
public_row
Breakout_1 <- list(
strategy_func = breakout_v1,
position_pct = 0.1,
leverage     = 10,
risk_TP = 0.15,
risk_SL = -0.065,
pos_TP_atr_mult = Inf,
pos_SL_atr_mult = Inf
)
state$latest_price <- agent$get_mark_price('ETH-USDT-SWAP')$markPx
okxr::get_account_balance
library("XAgent")
source('~/Documents/2025/_2025-05-11_XAgent/XAgent/R/utils_io_safe.R')
source('~/Documents/2025/_2025-05-11_XAgent/XAgent/R/utils_OKX_helpers.R')
source('~/Documents/2025/_2025-05-11_XAgent/XAgent/R/utils_calculate_TT.R')
source('~/Documents/2025/_2025-05-11_XAgent/XAgent/R/utils_strategy.R')
CryptoTraderAgent <- R6::R6Class("CryptoTraderAgent",
inherit = XAgent,
public = list(
run = function() {
self$local_check_and_reply()
},
# set data path
set_data_path = function(inst_id, path) {
self$mind_state$data_path[[inst_id]] <- path
},
get_data_path = function(inst_id) {
self$mind_state$data_path[[inst_id]]
},
# market data
get_candles_okx = function(inst_id, bar, limit = 100L) {
okxr::get_market_candles(
inst_id, bar, limit,
tz = self$mind_state$timezone, config = self$mind_state$tool_config$okx
)
},
get_history_candles_okx = function(inst_id, bar, before, limit = 100L) {
okxr::get_market_history_candles(
inst_id, bar, before, limit,
tz = self$mind_state$timezone, config = self$mind_state$tool_config$okx
)
},
get_mark_price = function(inst_id) {
okxr::get_public_mark_price(inst_id, tz = self$mind_state$timezone, config = self$mind_state$tool_config$okx)
},
# get account data
get_account_balance = function() okxr::get_account_balance(tz = self$mind_state$timezone, config = self$mind_state$tool_config$okx),
get_account_positions = function() okxr::get_account_positions(tz = self$mind_state$timezone, config = self$mind_state$tool_config$okx),
# place order, check order, and cancel order
place_order = function(body_list) {
res <- okxr::post_trade_order(body_list, tz = self$mind_state$timezone, config = self$mind_state$tool_config$okx)
self$mind_state$order_live_list <- c(res$ordId, self$mind_state$order_live_list)
},
check_order = function(inst_id, ord_id) {
okxr::get_trade_order(inst_id, ord_id, tz = self$mind_state$timezone, config = self$mind_state$tool_config$okx)
},
cancel_order = function(inst_id, ord_id) {
okxr::post_trade_cancel_order(list(instId = inst_id, ordId = ord_id), tz = self$mind_state$timezone, config = self$mind_state$tool_config$okx)
},
# for data
rename_ohlcv_from_okx = rename_ohlcv_from_okx,
detect_time_gaps = detect_time_gaps,
load_candle_data = function(inst_id) .safe_read_rds(self$get_data_path(inst_id)),
sync_and_save_candles = function(df_new, inst_id) sync_and_save_candles(df_new, self$get_data_path(inst_id))
)
)
name <- "Zelina"
mind_state <- list(
identity = "a no-nonsense crypto trader and former investment banker from Hong Kong.",
personality = "clear, smart, and slightly provocative.",
tone_guideline = "Use technical vocabulary when needed, but be practical. Prioritize clarity over fluff."
)
agent <- CryptoTraderAgent$new(name, mind_state)
agent$mind_state$timezone <- "Asia/Hong_Kong"
agent$set_config('okx')
agent$set_data_path("ETH-USDT-SWAP", '/tmp/ETHUSDT_4H.rds')
agent$get_account_balance()
agent$get_account_balance()$totalEq
okxr::get_account_leverage_info
agent$get_account_positions
agent$get_account_positions()
%||%
rlang::%||%
rlang::`%||%`
`%||%` <- rlang::`%||%`
a %||% 10
a <- NULL
a %||% 10
a <- 5
a %||% 10
importFrom(rlang, "%||%")
ifelse
cd /Users/oliver/Documents/2025/_2025-07-06_okxr/okxr
cd '/Users/oliver/Documents/2025/_2025-07-06_okxr/okxr'
setwd('/Users/oliver/Documents/2025/_2025-07-06_okxr/okxr')
devtools::document()
